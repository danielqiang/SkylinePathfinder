from SkylinePathfinder.model import EuclideanGraph
from SkylinePathfinder.tsp import tsp_solver
import random


def as_percent(num):
    return str(num * 100) + '%'


def main(iterations, graph_size=7):
    """
    A program to test the accuracy of the greedy heuristic against
    the brute force approach.

    Given 1000 randomly generated paths, routes found by the greedy
    heuristic were about 10-20% longer on average than optimal routes
    found by brute force.
    """
    graph = EuclideanGraph().from_csv("./csv_data/school.csv")
    graph.connect_all()

    total = 0
    for i in range(iterations):
        names = random.sample(graph.classrooms.names, k=graph_size)
        greedy_dist = tsp_solver(graph, names, names[0], algorithm='greedy')[1]
        brute_dist = tsp_solver(graph, names, names[0], algorithm='brute force')[1]
        total += greedy_dist / brute_dist - 1

        print("Current: {}".format(i + 1))
        print("Greedy: {}, Brute force: {}".format(greedy_dist, brute_dist))
        print("The route generated by the greedy algorithm "
              "was {} longer.".format(as_percent(greedy_dist / brute_dist - 1)))

    print("On average, greedy routes were {} longer than optimal.".format(as_percent(total / iterations)))


if __name__ == '__main__':
    main(1000, 5)
